<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:CollectionExtensions.kt$x &lt; size &amp;&amp; (y == replaceWith.size || (y &lt; replaceWith.size &amp;&amp; !diffCallback.areItemsTheSame(this[x], replaceWith[y])))</ID>
    <ID>ConstructorParameterNaming:Transitions.kt$ChildTransitionState$val _contentAlpha: State&lt;Float></ID>
    <ID>ConstructorParameterNaming:Transitions.kt$ChildTransitionState$val _listItemOffsetY: State&lt;Dp></ID>
    <ID>ConstructorParameterNaming:Transitions.kt$HeaderTransitionState$val _cornerRadius: State&lt;Dp></ID>
    <ID>ConstructorParameterNaming:Transitions.kt$HeaderTransitionState$val _elevation: State&lt;Dp></ID>
    <ID>ConstructorParameterNaming:Transitions.kt$HeaderTransitionState$val _horizontalPadding: State&lt;Dp></ID>
    <ID>ConstructorParameterNaming:Transitions.kt$HeaderTransitionState$val _indicatorColor: State&lt;Color></ID>
    <ID>ConstructorParameterNaming:Transitions.kt$HeaderTransitionState$val _textBackground: State&lt;Color></ID>
    <ID>FunctionOnlyReturningConstant:RenderExtensions.kt$@Suppress("unused") internal fun Null.toReadableString(): String</ID>
    <ID>MagicNumber:Date.ios.kt$1000.0</ID>
    <ID>MagicNumber:PredictiveBackGestureOverlay.kt$BackGestureHandler$3F</ID>
    <ID>MagicNumber:PredictiveBackGestureOverlay.kt$BackGestureHandler$4F</ID>
    <ID>TooGenericExceptionCaught:NettyServer.kt$e: Throwable</ID>
    <ID>UndocumentedPublicClass:Date.kt$Date</ID>
    <ID>UndocumentedPublicClass:PredictiveBackAnimation.kt$BackCoordinator&lt;T : NavStackEntry&lt;*>> : BackCallback</ID>
    <ID>UndocumentedPublicClass:PredictiveBackAnimation.kt$PredictiveBackAnimation</ID>
    <ID>UndocumentedPublicClass:PredictiveBackGestureOverlay.kt$SwipeEdge</ID>
    <ID>UndocumentedPublicClass:UUID.kt$UUID</ID>
    <ID>UndocumentedPublicClass:Url.kt$Url</ID>
    <ID>UndocumentedPublicFunction:Date.ios.kt$public actual fun Date.toMillis(): Long</ID>
    <ID>UndocumentedPublicFunction:Date.ios.kt$public actual fun fromMillis( millis: Long ): Date</ID>
    <ID>UndocumentedPublicFunction:Date.ios.kt$public actual fun now(): Date</ID>
    <ID>UndocumentedPublicFunction:Date.jvm.kt$public actual fun Date.toMillis(): Long</ID>
    <ID>UndocumentedPublicFunction:Date.jvm.kt$public actual fun fromMillis( millis: Long ): Date</ID>
    <ID>UndocumentedPublicFunction:Date.jvm.kt$public actual fun now(): Date</ID>
    <ID>UndocumentedPublicFunction:Date.kt$public expect fun Date.toMillis(): Long</ID>
    <ID>UndocumentedPublicFunction:Date.kt$public expect fun fromMillis( millis: Long ): Date</ID>
    <ID>UndocumentedPublicFunction:Date.kt$public expect fun now(): Date</ID>
    <ID>UndocumentedPublicFunction:PredictiveBackAnimation.kt$@Composable public fun &lt;T : NavStackEntry&lt;*>> PredictiveBackContainer( backDispatcher: BackDispatcher, coordinator: BackCoordinator&lt;T>, modifier: Modifier = Modifier, backIcon: (@Composable (progress: Float, edge: SwipeEdge) -> Unit)? = null, startEdgeEnabled: Boolean = true, endEdgeEnabled: Boolean = true, edgeWidth: Dp = 16.dp, activationOffsetThreshold: Dp = 16.dp, confirmationProgressThreshold: Float = 0.2F, onClose: (() -> Unit)? = null, content: @Composable (Modifier, T) -> Unit, )</ID>
    <ID>UndocumentedPublicFunction:PredictiveBackAnimation.kt$@Composable public fun &lt;T : NavStackEntry&lt;*>> rememberPredictiveBackCoordinator( dispatcher: BackDispatcher, stack: NavigationStack&lt;T>, animation: PredictiveBackAnimation, onBackComplete: (T) -> Unit, ): BackCoordinator&lt;T></ID>
    <ID>UndocumentedPublicFunction:PredictiveBackAnimation.kt$@Composable public fun rememberDefaultPredictiveBackAnimation( maxWidth: Dp, ): PredictiveBackAnimation</ID>
    <ID>UndocumentedPublicFunction:PredictiveBackAnimation.kt$PredictiveBackAnimation$public suspend fun animate(event: BackEvent)</ID>
    <ID>UndocumentedPublicFunction:PredictiveBackAnimation.kt$PredictiveBackAnimation$public suspend fun cancelAnimation()</ID>
    <ID>UndocumentedPublicFunction:PredictiveBackAnimation.kt$PredictiveBackAnimation$public suspend fun finishAnimation()</ID>
    <ID>UndocumentedPublicFunction:PredictiveBackAnimation.kt$PredictiveBackAnimation$public suspend fun reset()</ID>
    <ID>UndocumentedPublicFunction:Resolver.kt$public suspend operator fun &lt;T> Sink&lt;T>.invoke( elements: Iterable&lt;T>, ): Unit</ID>
    <ID>UndocumentedPublicFunction:Resolver.kt$public suspend operator fun &lt;T> Sink&lt;T>.invoke( vararg elements: T, ): Unit</ID>
    <ID>UndocumentedPublicFunction:UUID.ios.kt$public actual fun RandomUUID(): UUID</ID>
    <ID>UndocumentedPublicFunction:UUID.ios.kt$public actual fun UUID.toHumanReadable(): String</ID>
    <ID>UndocumentedPublicFunction:UUID.ios.kt$public actual fun UUIDFrom( value: String, ): UUID</ID>
    <ID>UndocumentedPublicFunction:UUID.jvm.kt$public actual fun RandomUUID(): UUID</ID>
    <ID>UndocumentedPublicFunction:UUID.jvm.kt$public actual fun UUID.toHumanReadable(): String</ID>
    <ID>UndocumentedPublicFunction:UUID.jvm.kt$public actual fun UUIDFrom( value: String ): UUID</ID>
    <ID>UndocumentedPublicFunction:UUID.kt$public expect fun RandomUUID(): UUID</ID>
    <ID>UndocumentedPublicFunction:UUID.kt$public expect fun UUID.toHumanReadable(): String</ID>
    <ID>UndocumentedPublicFunction:UUID.kt$public expect fun UUIDFrom( value: String ): UUID</ID>
    <ID>UndocumentedPublicFunction:Url.ios.kt$public actual fun Url.toExternalValue(): String</ID>
    <ID>UndocumentedPublicFunction:Url.ios.kt$public actual fun UrlFor( s: String ): Url</ID>
    <ID>UndocumentedPublicFunction:Url.jvm.kt$public actual fun Url.toExternalValue(): String</ID>
    <ID>UndocumentedPublicFunction:Url.jvm.kt$public actual fun UrlFor( s: String ): Url</ID>
    <ID>UndocumentedPublicFunction:Url.kt$public expect fun Url.toExternalValue(): String</ID>
    <ID>UndocumentedPublicFunction:Url.kt$public expect fun UrlFor( s: String ): Url</ID>
    <ID>UndocumentedPublicProperty:Component.kt$@ExperimentalTeaApi public val ShareStateWhileSubscribed: ShareOptions = ShareOptions(SharingStarted.WhileSubscribed(), 1U)</ID>
    <ID>UndocumentedPublicProperty:PredictiveBackAnimation.kt$PredictiveBackAnimation$public val currentModifier: Modifier</ID>
    <ID>UndocumentedPublicProperty:PredictiveBackAnimation.kt$PredictiveBackAnimation$public val previousModifier: Modifier</ID>
    <ID>UndocumentedPublicProperty:Url.ios.kt$public actual val Url.domain: String get() = host ?: error("No domain: ${toExternalValue()}")</ID>
    <ID>UndocumentedPublicProperty:Url.ios.kt$public actual val Url.protocol: String? get() = scheme</ID>
    <ID>UndocumentedPublicProperty:Url.jvm.kt$public actual val Url.domain: String get() = host</ID>
    <ID>UndocumentedPublicProperty:Url.jvm.kt$public actual val Url.protocol: String? get() = scheme</ID>
    <ID>UndocumentedPublicProperty:Url.kt$public expect val Url.domain: String</ID>
    <ID>UndocumentedPublicProperty:Url.kt$public expect val Url.protocol: String?</ID>
    <ID>UndocumentedPublicProperty:Url.kt$public val Url.isSecureProtocol: Boolean get() = protocol == "https"</ID>
  </CurrentIssues>
</SmellBaseline>
